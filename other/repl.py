s = 0
while True:
    n = int(input())
    if n == 0: break
    s += n

print(s)

# =============================================================
# Напишите программу, на вход которой даются четыре числа 
# a, b, c и d, каждое в своей строке.
# Программа должна вывести фрагмент таблицы умножения 
# для всех чисел отрезка [a;b] на все числа отрезка [c;d].

# Числа a, b, c и d являются натуральными и не превосходят 10, a≤b, c≤d.

# Следуйте формату вывода из примера, 
# для разделения элементов внутри строки используйте '\t' — символ табуляции.
# Заметьте, что левым столбцом и верхней строкой выводятся сами числа 
# из заданных отрезков — заголовочные столбец и строка таблицы.

a = int(input('Введи число: '))
b = int(input('Введи число: '))
c = int(input('Введи число: '))
d = int(input('Введи число: '))
for n in range (c,d+1):
    print('\t'+str(n),end='')
print(end='\n')
for i in range (a,b+1):
    print(str(i)+'\t',end='')
    for j in range (c,d+1):
        print(str(i*j),end='\t')
    print(end='\n')

# =============================================================
# Напишите программу, которая считывает с клавиатуры два числа a и b,
# считает и выводит на консоль среднее арифметическое 
# всех чисел из отрезка [a;b], которые делятся на 3.

# В приведенном ниже примере среднее арифметическое 
# считается для чисел на отрезке [−5;12]. 
# Всего чисел, делящихся на 3, на этом отрезке 6: −3,0,3,6,9,12. 
# Их среднее арифметическое равно 4.5

# На вход программе подаются интервалы, 
# внутри которых всегда есть хотя бы одно число, которое делится на 3
a = int(input('Введи число: '))
b = int(input('Введи число: '))
s = 0 # сумма всех чисел
c = 0 # кол-во чисел
for j in range (a,b+1):
    if j%3 == 0:
        s = s+j
        c = c+1
    j+=1
print(s/c)
# or:
a,b = int(input()), int(input())
a += -a%3
b -= b%3
print((a+b)/2)

# =============================================================
user_name = input('Введите Ваше имя и фамилию: ')
user_adress = input('Введите Ваш адрес регистрации: ')
user_passport = input('Введите Ваши паспортные данные: ')
result = 'Вас зовут: {}. Вы зарегистрированы по адресу: {}. Вы ввели эти паспортные данные {}: '.format(user_name, user_adress, user_passport)
print(result)

# =============================================================
# Напишите программу, которая вычисляет процентное содержание символов G (гуанин)
# и C (цитозин) в введенной строке 
# (программа не должна зависеть от регистра вводимых символов).

# Например, в строке "acggtgttat" процентное содержание символов G и C равно 410⋅100=40.0,
# где 4 -- это количество символов G и C,  а 10 -- это длина строки.
string = input('Input Your string: ')
string_len = len(string)

s_c = string.upper().count('c'.upper())
s_g = string.upper().count('g'.upper())

count_len = s_c + s_g
result = (count_len / string_len) * 100

print(result)
s = 'abcdefghijk'
s[3:6]
s[:6]
s[3:]
s[::-1]
s[-3:]
s[:-6]
s[-1:-10:-2]

# =============================================================
# Узнав, что ДНК не является случайной строкой, 
# только что поступившие в Институт биоинформатики студенты
# группы информатиков предложили использовать алгоритм сжатия, 
# который сжимает повторяющиеся символы в строке.

# Кодирование осуществляется следующим образом:
# s = 'aaaabbсaa' преобразуется в 'a4b2с1a2', то есть группы 
# одинаковых символов исходной строки
# заменяются на этот символ и количество его повторений в этой позиции строки.

# Напишите программу, которая считывает строку, кодирует её предложенным алгоритмом
# и выводит закодированную последовательность на стандартный вывод. 
# Кодирование должно учитывать регистр символов.

s = str(input('').upper())
count = 1 # счетчик повторений
i = 1     # счетчик прохода по строке

print(s)

# =============================================================

my_tuple = (5.5, 6.9, 1.2, 34.7, 99.3, 34.99, 500.0, 11.54, 9.0, 1.5)
my_tuple_max = max(my_tuple)
my_tuple_min = min(my_tuple)
print(my_tuple_max)
print(my_tuple_min)

# =============================================================

s = {
    'Какой язык мы учим?: ' : 'Python',
    'Как в Python обозначается истина?: ' : 'True',
    'Как в Python обозначается ложь?: ' : 'False',
    'Что вернет выражение len("Hello!")?: ' : '6',
    'Чему равно утверждение 0 == None ?: ' : 'False',
    'Что вернет выражение "Hello"[1]?: ' : 'e',
    'Чему равно утверждение (True or False) and True?: ' : 'True',
    'Назовите цикл с пре-условием: ' : 'While',
    'Какой тип данных у числа 5.5: ' : 'Float',
    'Преобразуйте число в целое "___(13.5)" ' : 'int'
}
questio_cnt = 0
answer_cnt = 0
for question in s.keys():
    answer = input(question)
    if answer.lower() == s.get(question).lower():
        print('Верно')
        answer_cnt += 1
        questio_cnt += 1
        # cnt[0] += 1
        # cnt[1] += 1
    elif not answer.lower():
        print('Вопрос пропущен')
        questio_cnt += 1
    else:
        print('Не верно')
        questio_cnt += 1
print("Всего ответов {}, Из них правильных {}".format(questio_cnt, answer_cnt))

# =============================================================
# Напишите программу, на вход которой подается 
# одна строка с целыми числами.
# Программа должна вывести сумму этих чисел.

# Используйте метод split строки.

# Sample Input:

# 4 -1 9 3
# Sample Output:

# 15

num = input("Введите 4 числa: ").split()
for i in range(len(num)):
    num[i] = int(num[i])
print(sum(num))

# =============================================================
# Напишите программу, на вход которой подаётся список чисел одной строкой.

# Программа должна для каждого элемента этого списка вывести сумму 
# двух его соседей. Для элементов списка, являющихся крайними, 
# одним из соседей считается элемент, 
# находящий на противоположном конце этого списка. 
# Например, если на вход подаётся список "1 3 5 6 10", 
# то на выход ожидается список "13 6 9 15 7" (без кавычек).

# Если на вход пришло только одно число, надо вывести его же.

# Вывод должен содержать одну строку с числами нового списка, 
# разделёнными пробелом.
# решение
s = [ int(i) for i in input().split()]
t = []
l = len(s)-1
k = 0
i = 0
if len(s)==0:
    print(str(0))
else:
    for st in s:
        if len(s)>1:
            if i==0:
                k = s[i+1] + s[-1]
                t.append(k)
            elif i>0 and i<l:
                k=s[i-1]+s[i+1]
                t.append(k)
            elif i==l:
                k = s[i-1]+s[0]
                t.append(k)
        elif len(s)==1:
            k = s[i]
            t.append(k)       
        i +=1
    j = 0
    for st2 in t:
        print(str(t[j])+' ',end='')
        j +=1
# =============================================================
# Напишите программу, которая принимает на вход список чисел в одной строке 
# и выводит на экран в одну строку значения, 
# которые повторяются в нём более одного раза.

# Для решения задачи может пригодиться метод sort списка.

# Выводимые числа не должны повторяться, порядок их вывода может быть произвольным.
# можно так:
s=[int(i) for i in input().split()]
s.sort()
m=[]
for i in range(len(s)):
    if i>0:
        if s[i]==s[i-1]:
            if s[i] not in m:
                m+=[s[i]]
for i in m:
    print(i, end=" ")
или так:

ls = [int(i) for i in input().split()]
for i in set(ls):
    if ls.count(i) > 1:
        print(i, end=' ')

# =============================================================
# Напишите программу, которая считывает с консоли числа (по одному в строке) до тех пор,
 # пока сумма введённых чисел не будет равна 0 и сразу после этого 
 # выводит сумму квадратов всех считанных чисел.

# Гарантируется, что в какой-то момент сумма введённых чисел окажется равной 0, 
# после этого считывание продолжать не нужно.

# В примере мы считываем числа 1 -3 5 -6 -10 13; в этот момент замечаем, 
# что сумма этих чисел равна нулю и выводим сумму их квадратов, 
# не обращая внимания на то, что остались ещё не прочитанные значения.
s = 0
z = 0
while True:
    a = int(input('Введите несколько чисел: '))
    s += a
    z += (a**2)
    if s == 0:
        break
print(z)
# или так:
n_list = []

while True:
    n_list.append(int(input()))
    if sum(n_list) == 0:
        break
print(sum([i*i for i in n_list]))

# =============================================================
# Напишите программу, которая выводит часть последовательности 
# 1 2 2 3 3 3 4 4 4 4 5 5 5 5 5 ... (число повторяется столько раз, чему равно). 
# На вход программе передаётся неотрицательное целое число n — столько элементов
# последовательности должна отобразить программа. 
# На выходе ожидается последовательность чисел, записанных через пробел в одну строку.

# Например, если n = 7, то программа должна вывести 1 2 2 3 3 3 4.
s,a = [],int(input('Введите число: '))

2 пустых списка
список s = int(input()

for i in range(1, a + 1):

# генерирую список чисел от 1 до s (до введенного числа включительно)
# и игенерируюсь по каждому элементу списка

    s.extend([i]*i)

# добавляю в список s элемент i умноженный на самого себя

print(*s[:a])

# вывожу в консоль список s в срезе
# от первого элемента до последнего (до a)

# =============================================================

# Напишите программу, которая считывает список чисел lst из первой строки 
# и число x из второй строки, которая выводит все позиции, на которых
 # встречается число x в переданном списке lst.

# Позиции нумеруются с нуля, если число x не встречается в списке, 
# вывести строку "Отсутствует" (без кавычек, с большой буквы).

# Позиции должны быть выведены в одну строку, по возрастанию абсолютного значения.
lst = [int(i) for i in input().split()]
x = int(input())
for index, i in enumerate(lst):
    if i == x:
        print(index, end = ' ')
    elif i != x:
        print('Отсутствует')
        break
# или так:
lst=[int(i) for i in input().split()]
x=int(input())
c=0
for i in range(len(lst)):
    if x==lst[i]:
        print(i,end=" ")
    else:
        c+=1
if c==len(lst):
    print("Отсутствует")

# =============================================================

# Напишите программу, на вход которой подаётся прямоугольная матрица в виде последовательности строк,
# заканчивающихся строкой, содержащей только строку "end" (без кавычек)

# Программа должна вывести матрицу того же размера, у которой каждый элемент в позиции i, j равен 
# сумме элементов первой матрицы на позициях (i-1, j), (i+1, j), (i, j-1), (i, j+1). 
# У крайних символов соседний элемент находится с противоположной стороны матрицы.

# В случае одной строки/столбца элемент сам себе является соседом по соответствующему направлению.
def int_lst(x):
    y = []
    for i in x:
        i = int(i)
        y.append(i)
    return y
   
matrix = []
while True:
    lst = [n for n in input().split()]
    if lst != ['end']:
        lst = int_lst(lst)
        matrix.append(lst)
    else:
        break
rows = len(matrix)
cols = len(matrix[0])
a = [[0 for j in range(cols)] for i in range(rows)]
for i in range(rows):
    for j in range(cols):
        if i + 1 < rows and j + 1 < cols:
            a[i][j] = matrix[i][j-1]+matrix[i][j+1]+matrix[i-1][j]+matrix[i+1][j]
        elif i + 1 >= rows and j + 1 < cols:
            a[i][j] = matrix[i][j-1]+matrix[i][j+1]+matrix[i-1][j]+matrix[0][j]
        elif i + 1 < rows and j + 1 >= cols:
            a[i][j] = matrix[i][j-1]+matrix[i][0]+matrix[i-1][j]+matrix[i+1][j]
        else:
            a[i][j] = matrix[i][j-1]+matrix[i][0]+matrix[i-1][j]+matrix[0][j]
for t in a:
    for r in t:
        print (r, end=" ")
    print()

# =============================================================
# Выведите таблицу размером n×n, заполненную числами от 1 до n2 по спирали, 
# выходящей из левого верхнего угла и закрученной по часовой стрелке, 
# как показано в примере (здесь n=5):

def mtrx_snake(i, j, n):
    """
    Возвращает значение, расположенное в матрице размером n x n
    в строке i и в столбце j. Матрица заполнена порядковыми числами
    спиралью по часовой стрелке
    """
    k = min(i, j, n-i-1, n-j-1)
    if i == k:
        return 4 * (k * n - k**2) + j - k + 1
    elif j == n - k - 1:
        return 4 * (k * n - k**2) + n - 3 * k + i
    elif i == n - k - 1:
        return 4 * (k * n - k**2) + 3 * n - 5 * k - j - 2
    else:
        return 4 * (k * n - k**2) + 4 * n - 7 * k - i - 3
n = int(input())
mtrx = [[0 for j in range(n)] for i in range(n)]
print()
for i in range(n):
    for j in range(n):
        mtrx[i][j] = mtrx_snake(i, j, n)
        print(mtrx[i][j], end = '\t')
    print()
